#!/usr/bin/env python3
# -*- mode: python; indent-tabs-mode: nil -*-

# FlightAware multilateration client

import sys
import time
import argparse
import traceback

import mlat.client.util


# replace standard logging with our own versions early on so the output meshes nicely with piaware's logging
def log(msg, *args, **kwargs):
    print(time.strftime('%m/%d/%Y %H:%M:%S', time.gmtime()), 'mlat:', msg.format(*args, **kwargs), file=sys.stderr)
    sys.stderr.flush()
mlat.client.util.log = log


def log_exc(msg, *args, **kwargs):
    print(time.strftime('%m/%d/%Y %H:%M:%S', time.gmtime()), 'mlat:', msg.format(*args, **kwargs), file=sys.stderr)
    traceback.print_exc(file=sys.stderr)
    sys.stderr.flush()
mlat.client.util.log_exc = log_exc


import mlat.client.version

from mlat.client.receiver import ReceiverConnection
from flightaware.client.adeptclient import AdeptConnection, UdpServerConnection
from mlat.client.coordinator import Coordinator


def main():
    def port(s):
        port = int(s)
        if port < 1 or port > 65535:
            raise argparse.ArgumentTypeError('Port %s must be in the range 1 to 65535' % s)
        return port

    receiver_types = {
        # input type -> clock frequency, server clock type, connection type

        # "dump1090" / "beast" / "radarcape_12mhz" are functionally equivalent for the client,
        # but telling the server the difference lets it apply different parameters for clock
        # error / max drift
        'dump1090': (12000000, 'dump1090', 'beast'),
        'beast': (12000000, 'beast', 'beast'),
        'radarcape_12mhz': (12000000, 'radarcape_12mhz', 'beast'),
        'radarcape_gps': (1000000000, 'radarcape_gps', 'radarcape'),
        'sbs': (20000000, 'sbs', 'sbs')
    }

    parser = argparse.ArgumentParser(description="Client for multilateration.")

    inputs = parser.add_argument_group('Mode S receiver input connection')
    inputs.add_argument('--input-type',
                        help="Sets the input receiver type.",
                        choices=receiver_types.keys(),
                        default='dump1090')
    inputs.add_argument('--clock-type',
                        dest='input_type',
                        help="Compatibility alias for --input-type.",
                        choices=receiver_types.keys())
    inputs.add_argument('--input-host',
                        help="Host (IP or hostname) to connect to for Mode S traffic.",
                        default="localhost")
    inputs.add_argument('--input-port',
                        help="""
Port to connect to for Mode S traffic. For SBS receivers, use port 30006.
For Radarcape receivers, use port 10002.""",
                        type=port,
                        default=30005)

    parser.add_argument('--udp-transport',
                        help="Enable UDP transport. Expects a host:port:key argument.")

    args = parser.parse_args()

    log("fa-mlat-client {version} starting up", version=mlat.client.version.CLIENT_VERSION)

    freq, clock_type, conn_type = receiver_types[args.input_type]

    if args.udp_transport:
        udp_host, udp_port, udp_key = args.udp_transport.split(':')
        udp_port = int(udp_port)
        udp_key = int(udp_key)
        udp_transport = UdpServerConnection(udp_host, udp_port, udp_key)
        log("Using UDP transport to {host}:{port}", host=udp_host, port=udp_port)
    else:
        udp_transport = None

    receiver = ReceiverConnection(host=args.input_host, port=args.input_port, connection_type=conn_type)
    adept = AdeptConnection(udp_transport)
    coordinator = Coordinator(receiver=receiver, server=adept, outputs=[], freq=freq)
    adept.start(coordinator)
    coordinator.run_until(lambda: adept.closed)

if __name__ == '__main__':
    main()
